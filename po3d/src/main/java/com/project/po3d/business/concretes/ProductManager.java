package com.project.po3d.business.concretes;
import java.io.IOException;
import java.net.MalformedURLException;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.server.ResponseStatusException;
import java.util.NoSuchElementException;
import com.project.po3d.business.abstracts.ProductService;
import com.project.po3d.dto.product.ProductRequest;
import com.project.po3d.dto.product.ProductResponse;
import com.project.po3d.dto.product.ProductWithFilesResponse;
import com.project.po3d.dto.product.ProductWithFirstImageResponse;
import com.project.po3d.dto.product.UpdatedProductResponse;

import com.project.po3d.dto.product.ProductUpdateRequest;
import com.project.po3d.entity.Category;
import com.project.po3d.entity.Product;
import com.project.po3d.entity.ProductAttachment;
import com.project.po3d.exception.ResourceNotFoundException;
import com.project.po3d.repository.CategoryRepository;
import com.project.po3d.repository.ProductAttachmentRepository;
import com.project.po3d.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import java.util.Collections;

import org.springframework.core.io.UrlResource;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.apache.tomcat.util.http.fileupload.FileUtils;
import org.springframework.core.io.Resource;
import java.io.File;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ProductManager implements ProductService {
    private final ProductRepository productRepository;
    private final ProductAttachmentRepository productAttachmentRepository;
    private final CategoryRepository categoryRepository;
    private final String uploadDir = "uploads";  // **Dosya y√ºkleme dizini**

 
    @Transactional
    @Override
    public ProductResponse createProduct(String name, String description, UUID categoryId, Double price, Integer stock, List<MultipartFile> files) {
        // ‚úÖ Kategori Kontrol√º
        Category category = categoryRepository.findById(categoryId)
                .orElse(null);
    
        if (category == null) {
            return new ProductResponse(null, null, null, null, null, "Kategori bulunamadƒ±!", null);
        }
    
        // ‚úÖ Yeni √úr√ºn Olu≈ütur
        Product product = new Product();
        product.setName(name);
        product.setDescription(description);
        product.setPrice(price);
        product.setStock(stock);
        product.setCategory(category);
        
        // üî• √úr√ºn√º √∂nce kaydet!
        product = productRepository.save(product);
    
        // ‚úÖ √úr√ºn ƒ∞√ßin Klas√∂r Olu≈ütur
        String productFolderPath = uploadDir + "/" + product.getId();
        File productFolder = new File(productFolderPath);
        if (!productFolder.exists()) {
            productFolder.mkdirs();
        }
    
        // ‚úÖ Dosyalarƒ± Kaydet (UUID kullanarak)
        List<String> savedFileUrls = saveAttachments(product, files, productFolderPath);
    
        // ‚úÖ Yanƒ±t D√∂n
        return new ProductResponse(
                product.getId(),
                product.getName(),
                product.getDescription(),
                product.getPrice(),
                product.getStock(),
                category.getName(),
                savedFileUrls
        );
    }
    
    private List<String> saveAttachments(Product product, List<MultipartFile> files, String productFolderPath) {
        if (files == null || files.isEmpty()) {
            return new ArrayList<>();
        }
    
        return files.stream().map(file -> {
            try {
                // ‚úÖ **Benzersiz dosya adƒ± olu≈ütur (UUID)**
                String fileExtension = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));
                String uniqueFileName = UUID.randomUUID().toString() + fileExtension;
                Path filePath = Paths.get(productFolderPath, uniqueFileName).toAbsolutePath();
                
                // ‚úÖ **Dosyayƒ± kaydet**
                file.transferTo(filePath.toFile());
    
                // ‚úÖ **Dosyanƒ±n t√ºr√ºn√º belirle (image/video)**
                String fileType = file.getContentType().startsWith("image") ? "image" : "video";
    
                // ‚úÖ **Veritabanƒ±na kaydet**
                ProductAttachment attachment = new ProductAttachment();
                attachment.setProduct(product);
                attachment.setFileUrl(uniqueFileName); // üî• **UUID ile olu≈üturulan isim**
                attachment.setFileType(fileType);
                productAttachmentRepository.save(attachment);
    
                return uniqueFileName;
            } catch (IOException e) {
                throw new RuntimeException("Dosya kaydedilirken hata olu≈ütu: " + e.getMessage());
            }
        }).collect(Collectors.toList());
    }
    
      
    
    @Override
    public List<ProductWithFirstImageResponse> getAllProducts() {
        List<Product> products = productRepository.findAll();
        
        return products.stream().map(product -> {
            // √úr√ºn bilgilerini al
            String firstImageUrl = productAttachmentRepository
                                        .findByProductId(product.getId())
                                        .stream()
                                        .findFirst() // ƒ∞lk resim
                                        .map(ProductAttachment::getFileUrl) // Resmin URL'sini al
                                        .orElse(null); // Eƒüer resim yoksa null d√∂ner

            // ProductWithFirstImageResponse DTO'yu olu≈ütur
            return new ProductWithFirstImageResponse(
                product.getId(),
                product.getName(),
                product.getDescription(),
                product.getPrice(),
                product.getStock(),
                product.getCategory().getName(),
                firstImageUrl
            );
        }).collect(Collectors.toList());
    }

   @Override
public Resource getProductImage(UUID productId, String imageName) {
    try {
        // Dosyanƒ±n bulunduƒüu yolu belirle
        Path imagePath = Paths.get(uploadDir)
                .resolve(productId.toString()) // √úr√ºne ait klas√∂r
                .resolve(imageName) // Resmin kendisi
                .normalize();

        // Dosya varsa, kaynaƒüƒ± d√∂nd√ºr
        Resource resource = new UrlResource(imagePath.toUri());
        if (resource.exists() && resource.isReadable()) {
            return resource;
        } else {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Resim bulunamadƒ±.");
        }
    } catch (Exception e) {
        throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Resim y√ºklenirken hata olu≈ütu.");
    }
}

// productdetailpage one
  // 1Ô∏è‚É£ √úr√ºn bilgileri ve dosya URL'lerini getir
  @Override
  public ProductWithFilesResponse getProductDetails(UUID id) {
      Product product = productRepository.findById(id)
              .orElseThrow(() -> new ResourceNotFoundException("√úr√ºn bulunamadƒ±"));

      List<String> fileUrls = productAttachmentRepository.findByProductId(id)
              .stream()
              .map(ProductAttachment::getFileUrl)
              .collect(Collectors.toList());

      return new ProductWithFilesResponse(
              product.getId(),
              product.getName(),
              product.getDescription(),
              product.getPrice(),
              product.getStock(),
              product.getCategory().getName(),
              fileUrls
      );
  }

  // 2Ô∏è‚É£ √úr√ºn√ºn dosya adlarƒ±nƒ± JSON formatƒ±nda d√∂nd√ºr
  @Override
  public List<String> getProductFileNames(UUID id) {
      File productFolder = new File(uploadDir + "/" + id);
      if (!productFolder.exists() || !productFolder.isDirectory()) {
          throw new ResourceNotFoundException("√úr√ºne ait dosyalar bulunamadƒ±.");
      }

      return Arrays.stream(productFolder.listFiles())
              .filter(File::isFile)
              .map(File::getName)
              .collect(Collectors.toList());
  }

  // 3Ô∏è‚É£ Ger√ßek resim veya video dosyasƒ±nƒ± d√∂nd√ºr
  @Override
  public Resource getProductFile(UUID productId, String fileName) {
      try {
          Path filePath = Paths.get(uploadDir)
                  .resolve(productId.toString())
                  .resolve(fileName)
                  .normalize();

          Resource resource = new UrlResource(filePath.toUri());

          if (!resource.exists() || !resource.isReadable()) {
              return null;
          }
          return resource;
      } catch (Exception e) {
          throw new RuntimeException("Dosya y√ºklenemedi: " + fileName, e);
      }
  }

//edit

  // 1Ô∏è‚É£ √úr√ºn G√ºncelleme
 @Override
public UpdatedProductResponse updateProduct(UUID id, ProductUpdateRequest request) {
    Product product = productRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("√úr√ºn bulunamadƒ±"));

    product.setName(request.getName());
    product.setDescription(request.getDescription());
    product.setPrice(request.getPrice());
    product.setStock(request.getStock());

    // üîπ Kategori doƒürulamasƒ±: Sadece var olan kategoriler se√ßilebilir
    Category category = categoryRepository.findById(request.getCategoryId())
            .orElseThrow(() -> new ResourceNotFoundException("Ge√ßersiz kategori ID!"));

    product.setCategory(category);

    productRepository.save(product);
    return new UpdatedProductResponse(product);
}

    // 2Ô∏è‚É£ Resim Ekleme
    @Override
    public void addProductImage(UUID id, MultipartFile file) {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("√úr√ºn bulunamadƒ±"));

        try {
            Path productPath = Paths.get(uploadDir, id.toString());
            if (!Files.exists(productPath)) {
                Files.createDirectories(productPath);
            }

            Path filePath = productPath.resolve(file.getOriginalFilename());
            Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            throw new RuntimeException("Dosya y√ºklenirken hata olu≈ütu.", e);
        }
    }

    // 3Ô∏è‚É£ Resim Silme
    @Override
    public void deleteProductImage(UUID id, String fileName) {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("√úr√ºn bulunamadƒ±"));

        Path filePath = Paths.get(uploadDir, id.toString(), fileName);
        try {
            if (Files.exists(filePath)) {
                Files.delete(filePath);
            } else {
                throw new ResourceNotFoundException("Resim bulunamadƒ±.");
            }
        } catch (IOException e) {
            throw new RuntimeException("Resim silinirken hata olu≈ütu.", e);
        }
    }
@Transactional
@Override
public void deleteProduct(UUID id) {
    // ‚úÖ **√úr√ºn kontrol√º**
    Product product = productRepository.findById(id)
            .orElseThrow(() -> new ResourceNotFoundException("√úr√ºn bulunamadƒ±!"));

    // ‚úÖ **ƒ∞lgili dosyalarƒ± sil**
    String productFolderPath = uploadDir + "/" + id;
    File productFolder = new File(productFolderPath);

    if (productFolder.exists() && productFolder.isDirectory()) {
        try {
            FileUtils.deleteDirectory(productFolder); // üî• **Apache Commons IO ile t√ºm klas√∂r√º sil**
        } catch (IOException e) {
            throw new RuntimeException("Dosya klas√∂r√º silinemedi: " + e.getMessage());
        }
    }

    // ‚úÖ **Baƒülƒ± attachment kayƒ±tlarƒ±nƒ± sil**
    productAttachmentRepository.deleteByProductId(id);

    // ‚úÖ **√úr√ºn√º veritabanƒ±ndan sil**
    productRepository.delete(product);
}


    }
/* 
    // ‚úÖ √úr√ºn g√ºncelleme (Dosya ile)
    @Override
    public ProductResponse updateProduct(UUID id, UpdateProductRequest updateProductRequest, List<MultipartFile> files) {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("√úr√ºn bulunamadƒ±."));

        if (updateProductRequest.getProductName() != null) product.setName(updateProductRequest.getProductName());
        if (updateProductRequest.getDescription() != null) product.setDescription(updateProductRequest.getDescription());
        if (updateProductRequest.getCategory() != null) product.setCategory(updateProductRequest.getCategory());
        if (updateProductRequest.getPrice() != null) product.setPrice(updateProductRequest.getPrice());
        if (updateProductRequest.getStock() != null) product.setStock(updateProductRequest.getStock());

        productRepository.save(product);

        if (files != null && !files.isEmpty()) {
            String productFolderPath = uploadDir + "/" + product.getId();

            // Eski dosyalarƒ± sil
            deleteAttachments(product.getId());

            // Yeni dosyalarƒ± kaydet
            List<String> savedFileUrls = saveAttachments(product, files, productFolderPath);

            return new ProductResponse(
                    product.getId(),
                    product.getName(),
                    product.getDescription(),
                    product.getCategory(),
                    product.getPrice(),
                    product.getStock(),
                    savedFileUrls);
        }

        return getProductById(product.getId());
    }

    // ‚úÖ √úr√ºn g√ºncelleme (Dosya olmadan)
    @Override
    public ProductResponse updateProduct(UUID id, UpdateProductRequest updateProductRequest) {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("√úr√ºn bulunamadƒ±."));

        if (updateProductRequest.getProductName() != null) product.setName(updateProductRequest.getProductName());
        if (updateProductRequest.getDescription() != null) product.setDescription(updateProductRequest.getDescription());
        if (updateProductRequest.getCategory() != null) product.setCategory(updateProductRequest.getCategory());
        if (updateProductRequest.getPrice() != null) product.setPrice(updateProductRequest.getPrice());
        if (updateProductRequest.getStock() != null) product.setStock(updateProductRequest.getStock());

        productRepository.save(product);

        return getProductById(product.getId());
    }

    // ‚úÖ √úr√ºn silme
    @Override
    @Transactional
    public void deleteProduct(UUID id) {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("√úr√ºn bulunamadƒ±."));

        deleteAttachments(id);
        productRepository.delete(product);
    }

    // ‚úÖ T√ºm √ºr√ºnleri getirme
    @Override
    public List<ProductResponse> getAllProducts() {
        return productRepository.findAll()
                .stream()
                .map(product -> {
                    List<String> fileUrls = productAttachmentRepository.findByProductId(product.getId())
                            .stream()
                            .map(ProductAttachment::getFileUrl)
                            .collect(Collectors.toList());

                    return new ProductResponse(
                            product.getId(),
                            product.getName(),
                            product.getDescription(),
                            product.getCategory(),
                            product.getPrice(),
                            product.getStock(),
                            fileUrls);
                })
                .collect(Collectors.toList());
    }

    // ‚úÖ Belirli bir √ºr√ºn√º getirme
    @Override
    public ProductResponse getProductById(UUID id) {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("√úr√ºn bulunamadƒ±."));

        List<String> fileUrls = productAttachmentRepository.findByProductId(product.getId())
                .stream()
                .map(ProductAttachment::getFileUrl)
                .collect(Collectors.toList());

        return new ProductResponse(
                product.getId(),
                product.getName(),
                product.getDescription(),
                product.getCategory(),
                product.getPrice(),
                product.getStock(),
                fileUrls);
    }

    // ‚úÖ T√ºm √ºr√ºnleri silme
    @Override
    @Transactional
    public void deleteAllProducts() {
        productAttachmentRepository.deleteAll();
        productRepository.deleteAll();

        File directory = new File(uploadDir);
        if (directory.exists()) {
            deleteDirectory(directory.toPath());
        }
    }

   


    // üìå Yardƒ±mcƒ± Metod: √úr√ºn dosyalarƒ±nƒ± silme
    private void deleteAttachments(UUID productId) {
        List<ProductAttachment> attachments = productAttachmentRepository.findByProductId(productId);

        for (ProductAttachment attachment : attachments) {
            File file = new File(attachment.getFileUrl());
            if (file.exists()) {
                file.delete();
            }
        }

        productAttachmentRepository.deleteByProductId(productId);
    }

    // üìå Yardƒ±mcƒ± Metod: Klas√∂r silme
    private void deleteDirectory(Path path) {
        try {
            if (Files.exists(path)) {
                Files.walk(path)
                        .sorted((a, b) -> b.compareTo(a))
                        .forEach(file -> file.toFile().delete());
            }
        } catch (Exception e) {
            System.err.println("Klas√∂r silme hatasƒ±: " + e.getMessage());
        }
    }*/

